# Universal Windows Platform
# Build a Universal Windows Platform project using Visual Studio.
# Add steps that test and distribute an app, save build artifacts, and more:
# https://aka.ms/yaml

trigger:
- master

stages:
- stage: MSBuild
  jobs:
  - job:
    pool:
      vmImage: 'windows-latest'
    strategy:
      matrix:
        AddressSanitizer Debug:
          MSBuildConfiguration: Debug
        AddressSanitizer Release:
          MSBuildConfiguration: Release
    steps:
      - task: MSBuild@1
        displayName: 'MSBuild AddressSanitizer'
        inputs:
          solution: 'AddressSanitizer/AddressSanitizer.sln'
          msbuildArchitecture: 'x64'
          configuration: '$(MSBuildConfiguration)'
  - job:
    pool:
      vmImage: 'windows-latest'
    strategy:
      matrix:
        Likely Debug:
          MSBuildConfiguration: Debug
        Likely Release:
          MSBuildConfiguration: Release
    steps:
      - task: MSBuild@1
        displayName: 'MSBuild Likely'
        inputs:
          solution: 'Likely/Likely.sln'
          msbuildArchitecture: 'x64'
          configuration: '$(MSBuildConfiguration)'
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - script: brew install ninja cmake
        displayName: 'Install Ninja and CMake'
      - script: cmake -DCMAKE_TOOLCHAIN_FILE=$(Build.SourcesDirectory)/CMakePresets/cmake/clang.cmake -DCMAKE_INSTALL_PREFIX=$(Build.SourcesDirectory)/CMakePresets/out/install/clang-linux -H$(Build.SourcesDirectory)/CMakePresets -B$(Build.SourcesDirectory)/CMakePresets/out/build/clang-linux -G "Ninja Multi-Config"
        displayName: 'CMake Configure clang-linux'
      - script: cmake --build $(Build.SourcesDirectory)/CMakePresets/build/clang-linux --config Debug
        displayName: 'CMake Build Debug clang-linux'
      - script: cmake --build $(Build.SourcesDirectory)/CMakePresets/build/clang-linux --config Release
        displayName: 'CMake Build Release clang-linux'